#
# Copyright (C) 2012 Xilinx, Inc.
#
# This file is part of the port for FreeRTOS made by Xilinx to allow FreeRTOS
# to operate with Xilinx Zynq devices.
#
# This file is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License (version 2) as published by the
# Free Software Foundation AND MODIFIED BY the FreeRTOS exception 
# (see text further below).
#
# This file is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
# more details.
#
# You should have received a copy of the GNU General Public License; if not it
# can be viewed here: <http://www.gnu.org/licenses/>
#
# The following exception language was found at 
# http://www.freertos.org/a00114.html on May 8, 2012.
#
# GNU General Public License Exception
#
# Any FreeRTOS source code, whether modified or in its original release form,
# or whether in whole or in part, can only be distributed by you under the
# terms of the GNU General Public License plus this exception. An independent
# module is a module which is not derived from or based on FreeRTOS.
#
# EXCEPTION TEXT:
#
# Clause 1
#
# Linking FreeRTOS statically or dynamically with other modules is making a
# combined work based on FreeRTOS. Thus, the terms and conditions of the
# GNU General Public License cover the whole combination.
#
# As a special exception, the copyright holder of FreeRTOS gives you permission
# to link FreeRTOS with independent modules that communicate with FreeRTOS
# solely through the FreeRTOS API interface, regardless of the license terms
# of these independent modules, and to copy and distribute the resulting
# combined work under terms of your choice, provided that 
#
# Every copy of the combined work is accompanied by a written statement that
# details to the recipient the version of FreeRTOS used and an offer by
# yourself to provide the FreeRTOS source code (including any modifications
# you may have  made) should the recipient request it.
# The combined work is not itself an RTOS, scheduler, kernel or related product.
# The independent modules add significant and primary functionality to FreeRTOS
# and do not merely extend the existing functionality already present 
# in FreeRTOS.
#
# Clause 2
#
# FreeRTOS may not be used for any competitive or comparative purpose,
# including the publication of any form of run time or compile time metric,
# without the express permission of Real Time Engineers Ltd. (this is the norm
# within the industry and is intended to ensure information accuracy).
#

OPTION psf_version = 2.1.0 ;
BEGIN OS freertos_zynq

  OPTION DRC = FreeRTOS_drc ;
  OPTION supported_peripherals = ps7_cortexa9;
  OPTION COPYFILES = all;
  OPTION DEPENDS = (standalone_v4_2);
  #OPTION requires_os = (standalone xilkernel);
  #OPTION APP_COMPILER_FLAGS = "-D__USE_AMP__";
  OPTION APP_LINKER_FLAGS = "-Wl,--start-group,-lxil,-lfreertos,-lgcc,-lc,--end-group";
  OPTION VERSION = 8.20.a;
  OPTION NAME = "freertos_zynq";
  OPTION DESC = "FreeRTOS is a popular open source RTOS, this is a git version, use at your own risk";

  # STDIN/STDOUT
  PARAM name = stdin, type = peripheral_instance, requires_interface = stdin, default=none, desc = "Specify the instance name of the standard input peripheral";
  PARAM name = stdout, type = peripheral_instance, requires_interface = stdout, default=none, desc = "Specify the instance name of the standard output peripheral";

  # kernel behavior
  BEGIN CATEGORY kernel_behavior
    PARAM name = kernel_behavior, type = bool, default = true, desc = "Parameters relating to the kernel behavior", permit = user;
    PARAM name = cpu_clock_hz, type = int, default = 100000000, desc = "default clock frequency";
    PARAM name = peripheral_clock_hz, type = int, default = 33333000, desc = "Peripheral Module Clock (deprecated)";
    PARAM name = tick_rate_hz, type = int, default = 1000, desc = "The frequency of the RTOS tick interrupt. The tick interrupt is used to measure time. Therefore a higher tick frequency means time can be measured to a higher resolution. (typical 1000 = 1ms)";
    PARAM name = max_api_call_interrupt_priority, type = int, default = 18, desc = "Interrupts that are assigned a priority at or below configMAX_API_CALL_INTERRUPT_PRIORITY can call FreeRTOS safe API functions and will nest (which counter-intuitively in the ARM generic interrupt controller [GIC] means a priority that has a numerical value above configMAX_API_CALL_INTERRUPT_PRIORITY).";
    PARAM name = max_priorities, type = int, default = 7, desc = "The number of task priorities that will be available.  Priorities can be assigned from zero to (max_priorities - 1). You should set it to 7 to use the typical priority levels";
    PARAM name = max_co_routine_priorities, type = int, default = 2, desc = "The number of priorities available to the application co-routines. Any number of co-routines can share the same priority. Co-routines are prioritised separately.";
    PARAM name = minimal_stack_size, type = int, default = 200, desc = "The size of the stack allocated to the Idle task. Also used by standard demo and test tasks found in the main FreeRTOS download.";
    PARAM name = total_heap_size, type = int, default = 80, desc = "(Kb) n*1024. This value will only be used if your application makes use of one of the sample memory allocation schemes provided in the FreeRTOS source code download. Sets the amount of RAM reserved for use by the kernel - used when tasks, queues and semaphores are created.";
    PARAM name = max_task_name_len, type = int, default = 10, desc = "The maximum number of characters that can be in the name of a task.";
    PARAM name = queue_registry_size, type = int, default = 8, desc = "The maximum number of queues that can be registered at any one time. Registered queues can be viewed in the kernel aware debugger plug-in.";
    PARAM name = check_for_stack_overflow, type = int, default = 2, desc = "Set to 1 to include basic run time task stack checking.  Set to 2 to include more comprehensive run time task stack checking.";
    PARAM name = idle_should_yield, type = bool, default = true, desc = "Set to true if the Idle task should yield if another idle priority task is able to run, or false if the idle task should always use its entire time slice unless it is preempted.";
    PARAM name = config_assert, type = bool, default = true, desc = "An assertion is triggered if the parameter passed into configASSERT() is zero. When the application is stable the additional overhead can be removed by simply commenting out the configASSERT() definition in FreeRTOSConfig.h."
  END CATEGORY

  # kernel features
  BEGIN CATEGORY kernel_features
    PARAM name = kernel_features, type = bool, default = true, desc = "Include or exclude kernel features", permit = user;
    PARAM name = use_preemption, type = bool, default = true, desc = "Set to true to use the preemptive scheduler, or false to use the cooperative scheduler.";
    PARAM name = use_co_routines, type = bool, default = false, desc = "enable co-routines";
    PARAM name = use_mutexes, type = bool, default = true, desc = "Set to true to include mutex functionality, or false to exclude mutex functionality.";
    PARAM name = use_recursive_mutexes, type = bool, default = true, desc = "Set to true to include recursive mutex functionality, or false to exclude recursive mutex functionality.";
    PARAM name = use_counting_semaphores, type = bool, default = true, desc = "Set to true to include counting semaphore functionality, or false to exclude recursive mutex functionality.";
    PARAM name = use_queue_sets, type = bool, default = true, desc = "enable queue sets";
    PARAM name = use_stats_formatting_functions, type = bool, default = true, desc = "format the raw data provided by the uxTaskGetSystemState() function in to human readable ASCII form.  See the notes in the implementation of vTaskList() within FreeRTOS/Source/tasks.c for limitations.";
    PARAM name = use_port_optimised_task_selection, type = bool, default = true, desc = "configUSE_PORT_OPTIMISED_TASK_SELECTION is set to 1 in FreeRTOSConfig.h, then configMAX_PRIORITIES cannot be higher than 32.";
    PARAM name = use_tickless_idle, type = bool, default = false, desc = "Set configUSE_TICKLESS_IDLE to 1 to use the low power tickless mode, or 0 to keep the tick interrupt running at all times.";
    PARAM name = use_trace_facility, type = bool, default = true, desc = "Set to 1 if you wish to include additional structure members and functions to assist with execution visualisation and tracing. traceMACROS are the preferred method of tracing now.";
    PARAM name = use_16_bit_ticks, type = bool, default = false, desc = "Defining configUSE_16_BIT_TICKS as 1 causes TickType_t to be defined (typedef'ed) as an unsigned 16bit type. Defining configUSE_16_BIT_TICKS as 0 causes TickType_t to be defined (typedef'ed) as an unsigned 32bit type.";
  END CATEGORY

  # hardware
  BEGIN CATEGORY hardware_options
    PARAM name = hardware_options, type = bool, default = true, desc = "The application must provide a function that configures a peripheral to create the FreeRTOS tick interrupt, then define configSETUP_TICK_INTERRUPT() in FreeRTOSConfig.h to call the function.  This file contains a function that is suitable for use on the Zynq MPU. ", permit = none;
    PARAM name = interrupt_controller_base_address, type = string, default = "( XPAR_PS7_SCUGIC_0_DIST_BASEADDR )", desc = "fixed for Zynq MPU";
    PARAM name = interrupt_controller_cpu_interface_offset, type = string, default = "( -0xf00 )", desc = "fixed for Zynq MPU";
    PARAM name = unique_interrupt_priorities, type = int, default = 32, desc = "do not alter for Zynq MPU";
  END CATEGORY

  # timers and watchdogs
  BEGIN CATEGORY software_timers
    PARAM name = software_timers, typE = bool, default = true, desc = "Options relating to the software timers functionality", permit = user;
    PARAM name = use_timers, type = bool, default = true, desc = "Set to true to include software timer functionality, or false to exclude software timer functionality";
    PARAM name = timer_task_priority, type = string, default = "(configMAX_PRIORITIES - 1)", desc = "The priority at which the software timer service/daemon task will execute.";
    PARAM name = timer_queue_length, type = int, default = 5, desc = "The number of commands the timer command queue can hold at any one time.";
    PARAM name = timer_task_stack_depth, type = string, default = "(configMINIMAL_STACK_SIZE * 2)", desc = "The size of the stack allocated to the timer service/daemon task.";
    PARAM name = command_int_max_output_size, type = int, default = 2096, desc = "The size of the global output buffer that is available for use when there are multiple command interpreters running at once (for example, one on a UART and one on TCP/IP).  This is done to prevent an output buffer being defined by each implementation - which would waste RAM.  In this case, there is only one command interpreter running.";
  END CATEGORY

  # hooks [fixed]
  BEGIN CATEGORY hook_functions
    PARAM name = hook_functions, type = bool, default = true, desc = "Include or exclude application defined hook (callback) functions.  Callback functions must be defined by the application that is using FreeRTOS", permit = user;
    PARAM name = use_malloc_failed_hook, type = bool, default = true, desc = "Only used if heap_1.c, heap_2.c or heap_3.c is included in the project.  Set to true for the kernel to call vApplicationMallocFailedHookHook() if there is insufficient FreeRTOS heap available for a task, queue or semaphore to be created.  The application must provide an implementation of vApplicationMallocFailedHook().";
    PARAM name = use_application_task_tag, type = bool, default = false, desc = "When using trace macros it is sometimes necessary to include task.h before FreeRTOS.h.";
    PARAM name = use_stack_overflow_hook, type = bool, default = true, desc = "";
    PARAM name = use_idle_hook, type = bool, default = false, desc = "Set to true for the kernel to call vApplicationIdleHook() on each iteration of the idle task. The application must provide an implementation of vApplicationIdleHook().";
    PARAM name = use_tick_hook, type = bool, default = false, desc = "Set to true for the kernel to call vApplicationTickHook() during each tick interrupt. The application must provide an implementation of vApplicationTickHook().";
    PARAM name = generate_run_time_stats, type = bool, default = false, desc = "private watchdog is used to generate run time stats, must define vInitialiseTimerForRunTimeStats() in application";
  END CATEGORY

END OS

##
